// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cryptonstudio/crypton-matching-engine/matching (interfaces: Handler)

// Package mockmatching is a generated GoMock package.
package mockmatching

import (
	reflect "reflect"

	matching "github.com/cryptonstudio/crypton-matching-engine/matching"
	gomock "github.com/golang/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// OnAddOrder mocks base method.
func (m *MockHandler) OnAddOrder(arg0 *matching.OrderBook, arg1 *matching.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAddOrder", arg0, arg1)
}

// OnAddOrder indicates an expected call of OnAddOrder.
func (mr *MockHandlerMockRecorder) OnAddOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAddOrder", reflect.TypeOf((*MockHandler)(nil).OnAddOrder), arg0, arg1)
}

// OnAddOrderBook mocks base method.
func (m *MockHandler) OnAddOrderBook(arg0 *matching.OrderBook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAddOrderBook", arg0)
}

// OnAddOrderBook indicates an expected call of OnAddOrderBook.
func (mr *MockHandlerMockRecorder) OnAddOrderBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAddOrderBook", reflect.TypeOf((*MockHandler)(nil).OnAddOrderBook), arg0)
}

// OnAddPriceLevel mocks base method.
func (m *MockHandler) OnAddPriceLevel(arg0 *matching.OrderBook, arg1 matching.PriceLevelUpdate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnAddPriceLevel", arg0, arg1)
}

// OnAddPriceLevel indicates an expected call of OnAddPriceLevel.
func (mr *MockHandlerMockRecorder) OnAddPriceLevel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnAddPriceLevel", reflect.TypeOf((*MockHandler)(nil).OnAddPriceLevel), arg0, arg1)
}

// OnDeleteOrder mocks base method.
func (m *MockHandler) OnDeleteOrder(arg0 *matching.OrderBook, arg1 *matching.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDeleteOrder", arg0, arg1)
}

// OnDeleteOrder indicates an expected call of OnDeleteOrder.
func (mr *MockHandlerMockRecorder) OnDeleteOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDeleteOrder", reflect.TypeOf((*MockHandler)(nil).OnDeleteOrder), arg0, arg1)
}

// OnDeleteOrderBook mocks base method.
func (m *MockHandler) OnDeleteOrderBook(arg0 *matching.OrderBook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDeleteOrderBook", arg0)
}

// OnDeleteOrderBook indicates an expected call of OnDeleteOrderBook.
func (mr *MockHandlerMockRecorder) OnDeleteOrderBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDeleteOrderBook", reflect.TypeOf((*MockHandler)(nil).OnDeleteOrderBook), arg0)
}

// OnDeletePriceLevel mocks base method.
func (m *MockHandler) OnDeletePriceLevel(arg0 *matching.OrderBook, arg1 matching.PriceLevelUpdate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDeletePriceLevel", arg0, arg1)
}

// OnDeletePriceLevel indicates an expected call of OnDeletePriceLevel.
func (mr *MockHandlerMockRecorder) OnDeletePriceLevel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDeletePriceLevel", reflect.TypeOf((*MockHandler)(nil).OnDeletePriceLevel), arg0, arg1)
}

// OnError mocks base method.
func (m *MockHandler) OnError(arg0 *matching.OrderBook, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnError", arg0, arg1)
}

// OnError indicates an expected call of OnError.
func (mr *MockHandlerMockRecorder) OnError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockHandler)(nil).OnError), arg0, arg1)
}

// OnExecuteOrder mocks base method.
func (m *MockHandler) OnExecuteOrder(arg0 *matching.OrderBook, arg1 *matching.Order, arg2, arg3, arg4 matching.Uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnExecuteOrder", arg0, arg1, arg2, arg3, arg4)
}

// OnExecuteOrder indicates an expected call of OnExecuteOrder.
func (mr *MockHandlerMockRecorder) OnExecuteOrder(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnExecuteOrder", reflect.TypeOf((*MockHandler)(nil).OnExecuteOrder), arg0, arg1, arg2, arg3, arg4)
}

// OnExecuteTrade mocks base method.
func (m *MockHandler) OnExecuteTrade(arg0 *matching.OrderBook, arg1, arg2 *matching.Order, arg3, arg4, arg5 matching.Uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnExecuteTrade", arg0, arg1, arg2, arg3, arg4, arg5)
}

// OnExecuteTrade indicates an expected call of OnExecuteTrade.
func (mr *MockHandlerMockRecorder) OnExecuteTrade(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnExecuteTrade", reflect.TypeOf((*MockHandler)(nil).OnExecuteTrade), arg0, arg1, arg2, arg3, arg4, arg5)
}

// OnUpdateOrder mocks base method.
func (m *MockHandler) OnUpdateOrder(arg0 *matching.OrderBook, arg1 *matching.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnUpdateOrder", arg0, arg1)
}

// OnUpdateOrder indicates an expected call of OnUpdateOrder.
func (mr *MockHandlerMockRecorder) OnUpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdateOrder", reflect.TypeOf((*MockHandler)(nil).OnUpdateOrder), arg0, arg1)
}

// OnUpdateOrderBook mocks base method.
func (m *MockHandler) OnUpdateOrderBook(arg0 *matching.OrderBook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnUpdateOrderBook", arg0)
}

// OnUpdateOrderBook indicates an expected call of OnUpdateOrderBook.
func (mr *MockHandlerMockRecorder) OnUpdateOrderBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdateOrderBook", reflect.TypeOf((*MockHandler)(nil).OnUpdateOrderBook), arg0)
}

// OnUpdatePriceLevel mocks base method.
func (m *MockHandler) OnUpdatePriceLevel(arg0 *matching.OrderBook, arg1 matching.PriceLevelUpdate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnUpdatePriceLevel", arg0, arg1)
}

// OnUpdatePriceLevel indicates an expected call of OnUpdatePriceLevel.
func (mr *MockHandlerMockRecorder) OnUpdatePriceLevel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUpdatePriceLevel", reflect.TypeOf((*MockHandler)(nil).OnUpdatePriceLevel), arg0, arg1)
}
